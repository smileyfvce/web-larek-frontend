{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/components/base/AppApi.ts","webpack://my-webpack-project/./src/components/base/api.ts","webpack://my-webpack-project/./src/utils/constants.ts","webpack://my-webpack-project/./src/components/base/events.ts","webpack://my-webpack-project/./src/components/Model/CardsData.ts","webpack://my-webpack-project/./src/components/Model/CartData.ts","webpack://my-webpack-project/./src/utils/utils.ts","webpack://my-webpack-project/./src/components/View/CardView.ts","webpack://my-webpack-project/./src/components/base/Component.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["import { Api } from \"./api\";\nexport class AppApi extends Api {\n    constructor(baseUrl, options = {}) {\n        super(baseUrl, options);\n    }\n    getCardList() {\n        return this.get('/product')\n            .then((data) => data.items);\n    }\n    getCardItem(id) {\n        return this.get(`/product/${id}`);\n    }\n    orderCards(order) {\n        return this.post('/order', order);\n    }\n}\n","export class Api {\n    constructor(baseUrl, options = {}) {\n        var _a;\n        this.baseUrl = baseUrl;\n        this.options = {\n            headers: Object.assign({ 'Content-Type': 'application/json' }, ((_a = options.headers) !== null && _a !== void 0 ? _a : {}))\n        };\n    }\n    handleResponse(response) {\n        if (response.ok)\n            return response.json();\n        else\n            return response.json()\n                .then(data => { var _a; return Promise.reject((_a = data.error) !== null && _a !== void 0 ? _a : response.statusText); });\n    }\n    get(uri) {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method: 'GET' })).then(this.handleResponse);\n    }\n    post(uri, data, method = 'POST') {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method, body: JSON.stringify(data) })).then(this.handleResponse);\n    }\n}\n","export const API_URL = `${process.env.API_ORIGIN}/api/weblarek`;\nexport const CDN_URL = `${process.env.API_ORIGIN}/content/weblarek`;\nexport const settings = {};\n","/**\n * Брокер событий, классическая реализация\n * В расширенных вариантах есть возможность подписаться на все события\n * или слушать события по шаблону например\n */\nexport class EventEmitter {\n    constructor() {\n        this._events = new Map();\n    }\n    /**\n     * Установить обработчик на событие\n     */\n    on(eventName, callback) {\n        var _a;\n        if (!this._events.has(eventName)) {\n            this._events.set(eventName, new Set());\n        }\n        (_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.add(callback);\n    }\n    /**\n     * Снять обработчик с события\n     */\n    off(eventName, callback) {\n        var _a;\n        if (this._events.has(eventName)) {\n            this._events.get(eventName).delete(callback);\n            if (((_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.size) === 0) {\n                this._events.delete(eventName);\n            }\n        }\n    }\n    /**\n     * Инициировать событие с данными\n     */\n    emit(eventName, data) {\n        this._events.forEach((subscribers, name) => {\n            if (name === '*')\n                subscribers.forEach(callback => callback({\n                    eventName,\n                    data\n                }));\n            if (name instanceof RegExp && name.test(eventName) || name === eventName) {\n                subscribers.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n     * Слушать все события\n     */\n    onAll(callback) {\n        this.on(\"*\", callback);\n    }\n    /**\n     * Сбросить все обработчики\n     */\n    offAll() {\n        this._events = new Map();\n    }\n    /**\n     * Сделать коллбек триггер, генерирующий событие при вызове\n     */\n    trigger(eventName, context) {\n        return (event = {}) => {\n            this.emit(eventName, Object.assign(Object.assign({}, (event || {})), (context || {})));\n        };\n    }\n}\n","import { EventEmitter } from '../base/events';\nexport class CardsData extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this._cards = [];\n        this._preview = null;\n    }\n    get cards() {\n        return this._cards;\n    }\n    get preview() {\n        return this._preview;\n    }\n    set cards(cards) {\n        this._cards = cards;\n        this.emit('cards:changed', { cards: this._cards });\n    }\n    set preview(id) {\n        this._preview = id;\n        this.emit('preview:changed', { preview: this._preview });\n    }\n    getItem(itemId) {\n        return this._cards.find((item) => item.id === itemId);\n    }\n    clearPreview() {\n        this._preview = null;\n    }\n}\n","import { EventEmitter } from '../base/events';\nexport class CartData extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this._items = [];\n    }\n    get items() {\n        return this._items;\n    }\n    get total() {\n        return this._items.reduce((sum, item) => sum + (item.price || 0), 0);\n    }\n    get count() {\n        return this._items.length;\n    }\n    addCard(card) {\n        if (!this.hasCard(card.id)) {\n            this._items.push(card);\n            this.emit('cart:changed', { items: this._items, total: this.total });\n            this.emit('count:changed', { count: this.count });\n        }\n    }\n    deleteCard(cardId) {\n        const index = this._items.findIndex((item) => item.id === cardId);\n        if (index !== -1) {\n            this._items.splice(index, 1);\n            this.emit('cart:changed', { items: this._items, total: this.total });\n            this.emit('count:changed', { count: this.count });\n        }\n    }\n    hasCard(cardId) {\n        return this._items.some((item) => item.id === cardId);\n    }\n    clear() {\n        this._items = [];\n        this.emit('cart:changed', { items: this._items, total: this.total });\n        this.emit('count:changed', { count: this.count });\n    }\n}\n","export function pascalToKebab(value) {\n    return value.replace(/([a-z0–9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nexport function isSelector(x) {\n    return (typeof x === \"string\") && x.length > 1;\n}\nexport function isEmpty(value) {\n    return value === null || value === undefined;\n}\nexport function ensureAllElements(selectorElement, context = document) {\n    if (isSelector(selectorElement)) {\n        return Array.from(context.querySelectorAll(selectorElement));\n    }\n    if (selectorElement instanceof NodeList) {\n        return Array.from(selectorElement);\n    }\n    if (Array.isArray(selectorElement)) {\n        return selectorElement;\n    }\n    throw new Error(`Unknown selector element`);\n}\nexport function ensureElement(selectorElement, context) {\n    if (isSelector(selectorElement)) {\n        const elements = ensureAllElements(selectorElement, context);\n        if (elements.length > 1) {\n            console.warn(`selector ${selectorElement} return more then one element`);\n        }\n        if (elements.length === 0) {\n            throw new Error(`selector ${selectorElement} return nothing`);\n        }\n        return elements.pop();\n    }\n    if (selectorElement instanceof HTMLElement) {\n        return selectorElement;\n    }\n    throw new Error('Unknown selector element');\n}\nexport function cloneTemplate(query) {\n    const template = ensureElement(query);\n    return template.content.firstElementChild.cloneNode(true);\n}\nexport function bem(block, element, modifier) {\n    let name = block;\n    if (element)\n        name += `__${element}`;\n    if (modifier)\n        name += `_${modifier}`;\n    return {\n        name,\n        class: `.${name}`\n    };\n}\nexport function getObjectProperties(obj, filter) {\n    return Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(obj)))\n        .filter(([name, prop]) => filter ? filter(name, prop) : (name !== 'constructor'))\n        .map(([name, prop]) => name);\n}\n/**\n * Устанавливает dataset атрибуты элемента\n */\nexport function setElementData(el, data) {\n    for (const key in data) {\n        el.dataset[key] = String(data[key]);\n    }\n}\n/**\n * Получает типизированные данные из dataset атрибутов элемента\n */\nexport function getElementData(el, scheme) {\n    const data = {};\n    for (const key in el.dataset) {\n        data[key] = scheme[key](el.dataset[key]);\n    }\n    return data;\n}\n/**\n * Проверка на простой объект\n */\nexport function isPlainObject(obj) {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype === Object.getPrototypeOf({}) ||\n        prototype === null;\n}\nexport function isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * Фабрика DOM-элементов в простейшей реализации\n * здесь не учтено много факторов\n * в интернет можно найти более полные реализации\n */\nexport function createElement(tagName, props, children) {\n    const element = document.createElement(tagName);\n    if (props) {\n        for (const key in props) {\n            const value = props[key];\n            if (isPlainObject(value) && key === 'dataset') {\n                setElementData(element, value);\n            }\n            else {\n                // @ts-expect-error fix indexing later\n                element[key] = isBoolean(value) ? value : String(value);\n            }\n        }\n    }\n    if (children) {\n        for (const child of Array.isArray(children) ? children : [children]) {\n            element.append(child);\n        }\n    }\n    return element;\n}\n","import { Component } from '../base/Component';\nimport { ensureElement } from '../../utils/utils';\nexport class CardView extends Component {\n    constructor(container) {\n        super(container);\n        this._category = ensureElement('.card__category', container);\n        this._title = ensureElement('.card__title', container);\n        this._image = ensureElement('.card__image', container);\n        this._price = ensureElement('.card__price', container);\n        try {\n            this._button = ensureElement('.button', container);\n        }\n        catch (_a) {\n            this._button = undefined;\n        }\n        try {\n            this._description = ensureElement('.card__text', container);\n        }\n        catch (_b) {\n            this._description = undefined;\n        }\n    }\n    set category(value) {\n        this._category.textContent = value;\n        const categoryClass = `card__category_${value\n            .toLowerCase()\n            .replace(' ', '-')}`;\n        this._category.className = `card__category ${categoryClass}`;\n    }\n    set title(value) {\n        this._title.textContent = value;\n    }\n    set image(value) {\n        this._image.src = value;\n        this._image.alt = this._title.textContent || '';\n    }\n    set price(value) {\n        if (value === null) {\n            this._price.textContent = 'Бесценно';\n        }\n        else {\n            this._price.textContent = `${value} синапсов`;\n        }\n    }\n    set description(value) {\n        if (this._description) {\n            this._description.textContent = value;\n        }\n    }\n    set inCart(value) {\n        if (this._button) {\n            if (value) {\n                this._button.setAttribute('disabled', 'true');\n                this._button.textContent = 'В корзине';\n            }\n            else {\n                this._button.removeAttribute('disabled');\n                this._button.textContent = 'В корзину';\n            }\n        }\n    }\n    render(data) {\n        Object.assign(this, data !== null && data !== void 0 ? data : {});\n        return this.container;\n    }\n}\n","export class Component {\n    constructor(container) {\n        this.container = container;\n    }\n    render(data) {\n        Object.assign(this, data !== null && data !== void 0 ? data : {});\n        return this.container;\n    }\n}\n","import './scss/styles.scss';\nimport { AppApi } from './components/base/AppApi';\nimport { API_URL } from './utils/constants';\n// Слой данных\nimport { CardsData } from './components/Model/CardsData';\nimport { CartData } from './components/Model/CartData';\nimport { ensureElement, cloneTemplate } from './utils/utils';\nimport { EventEmitter } from './components/base/events';\nimport { CardView } from './components/View/CardView';\n// Инициализируем компоненты\nconst events = new EventEmitter();\nconst api = new AppApi(API_URL);\nconst cardsData = new CardsData();\nconst cartData = new CartData();\n//const orderData = new OrderData();\n// Получаем элементы DOM\nconst gallery = ensureElement('.gallery');\nconst basketCounter = ensureElement('.header__basket-counter');\nconst basketButton = ensureElement('.header__basket');\nconst modalContainer = ensureElement('#modal-container');\n// Создаем шаблоны\nconst cardTemplate = ensureElement('#card-catalog');\nconst cardPreviewTemplate = ensureElement('#card-preview');\nconst basketTemplate = ensureElement('#basket');\nconst orderTemplate = ensureElement('#order');\nconst contactsTemplate = ensureElement('#contacts');\nconst successTemplate = ensureElement('#success');\n// Создание view компонентов\n//const modal = new ModalView(modalContainer);\n//const cartView = new CartView(cloneTemplate(basketTemplate), events);\n//const paymentFormView = new PaymentFormView(cloneTemplate(orderTemplate), events);\n//const contactsFormView = new ContactsFormView(cloneTemplate(contactsTemplate), events);\n//const confirmView = new ConfirmView(cloneTemplate(successTemplate), events);\n// Загрузка карточки\napi\n    .getCardList()\n    .then((cards) => {\n    cardsData.cards = cards;\n    renderCards();\n})\n    .catch((err) => console.log(err));\n// Рендер карточек товаров\nfunction renderCards() {\n    gallery.innerHTML = '';\n    cardsData.cards.forEach((card) => {\n        const cardElement = cloneTemplate(cardTemplate);\n        const cardView = new CardView(cardElement);\n        cardView.render(Object.assign(Object.assign({}, card), { inCart: cartData.hasCard(card.id) }));\n        cardElement.addEventListener('click', () => {\n            events.emit('card:open', card);\n        });\n        gallery.appendChild(cardElement);\n    });\n}\n// События\nevents.on('card:open', (card) => {\n    const previewElement = cloneTemplate(cardPreviewTemplate);\n    const previewView = new CardView(previewElement);\n    previewView.render(Object.assign(Object.assign({}, card), { inCart: cartData.hasCard(card.id) }));\n});\n"],"names":["AppApi","_Api","_inherits","_super","_createSuper","baseUrl","options","arguments","length","undefined","_classCallCheck","call","_createClass","key","value","getCardList","this","get","then","data","items","getCardItem","id","concat","orderCards","order","post","Api","_a","headers","Object","assign","handleResponse","response","ok","json","Promise","reject","error","statusText","uri","fetch","method","body","JSON","stringify","API_URL","process","EventEmitter","_events","Map","on","eventName","callback","has","set","Set","add","off","size","emit","forEach","subscribers","name","RegExp","test","onAll","offAll","trigger","context","_this","event","CardsData","_EventEmitter","apply","_cards","_preview","cards","preview","getItem","itemId","find","item","clearPreview","CartData","_items","reduce","sum","price","addCard","card","hasCard","push","total","count","deleteCard","cardId","index","findIndex","splice","some","clear","isSelector","x","ensureElement","selectorElement","elements","ensureAllElements","document","Array","from","querySelectorAll","NodeList","isArray","Error","console","warn","pop","HTMLElement","cloneTemplate","query","content","firstElementChild","cloneNode","CardView","_Component","container","_category","_title","_image","_price","_button","_description","_b","textContent","categoryClass","toLowerCase","replace","className","src","alt","setAttribute","removeAttribute","render","Component","events","api","cardsData","cartData","gallery","cardTemplate","cardPreviewTemplate","renderCards","innerHTML","cardElement","inCart","addEventListener","appendChild","err","log","previewElement"],"sourceRoot":""}